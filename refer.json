{
    "status": "ok",
    "status_message": "Query was successful",
    "data": {
      "refer": [
        {
            "type": "Javascript",
            "id": 1,
            "title": "변수",
            "desc": "변수는 변하는 데이터 값을 저장할 수 있는 메모리 공간입니다.",
            "category": "var 변수명 = 값;",
            "property": "지역변수, 전역변수, 매개변수, 멤버변수",
            "element": "변수 선언에는 var, let, const 3가지의 선언 방법이 있습니다."
        },{
            "type": "Javascript",
            "id": 2,
            "title": "문자형 변수",
            "desc": "문자형 데이터는 문자나 숫자를 큰따옴표또는 작은따옴표로 감싸고 있습니다.",
            "category": "var 변수명 = '문자'",
            "property": "문자형, 숫자형, 논리형, TYPEOF",
            "element": "문자형 데이터에 HTML 태그를 포함하여 출력하면 태그로 인식합니다."
        },{
            "type": "Javascript",
            "id": 3,
            "title": "숫자형 변수",
            "desc": "숫자형 데이터는 단어 의미 그대로 숫자를 의미합니다.",
            "category": "var 변수명 = 12345",
            "property": "문자형, 숫자형, 논리형, TYPEOF",
            "element": "'100'과 같이 큰따옴표가 숫자를 감싸고 있다면 숫자가 아닌 문자형 데이터입니다."
        },{
            "type": "Javascript",
            "id": 4,
            "title": "배열",
            "desc": "배열은 여러개의 데이터를 순차적으로 저장하는 저장소입니다.",
            "category": "var 변수명 = [값1, 값2, 값3......]",
            "property": "forEach, for in문, for of문, 배열 비구조화 할당",
            "element": "배열에 담겨있는 값을 가져올 때는 대괄호 안에 숫자를 넣는다. 이 숫자를 색인(index)라고 부르고 0부터 시작한다."
        },{
            "type": "Javascript",
            "id": 5,
            "title": "산술연산자",
            "desc": "산술 연산자에는 더하기(+), 빼기(-), 곱하기(*), 나누기(/), 나머지(%)가 있습니다. ",
            "category": "A+B, A-B, A*B, A/B, A%B",
            "property": "산술연산자, 대입연산자, 증감연산자, 비교연산자, 논리연산자",
            "element": "산술 연산자로 연산을 하기 위해서는 연산 대상 데이터가 반드시 2개 있어야 합니다."
        },{
            "type": "Javascript",
            "id": 6,
            "title": "대입연산자",
            "desc": "대입 연산자(=)는 연산된 데이터를 변수에 저장할 때 사용합니다.",
            "category": "A=B, A+=B, A*=B, A/=B, A%=B",
            "property": "산술연산자, 대입연산자, 증감연산자, 비교연산자, 논리연산자",
            "element": "복합 대입 연산자(+=, -=, *=, /=, %=)는 산술 연산자와 대입 연산자가 복합적으로 적용된 것을 의미합니다."
        },{
            "type": "Javascript",
            "id": 7,
            "title": "증감연산자",
            "desc": "증감 연산자에는 숫자형 데이터를 1씩 증가시키는 증가 연산자(++)와 반대로 1씩 감소시키는 감소 연산자(--)가 있습니다.",
            "category": "num++; num--; ++num; --num;",
            "property": "산술연산자, 대입연산자, 증감연산자, 비교연산자, 논리연산자",
            "element": "증감 연산자는 변수의 어느 위치에 오는가에 따라 결괏값이 달라집니다."
        },{
            "type": "Javascript",
            "id": 8,
            "title": "비교연산자",
            "desc": "두 데이터를 '크다, 작다, 같다'와 같이 비교할 때 사용하는 연산자입니다.",
            "category": "x==y, x===y, x!=y, x!==y, x>y, x<y, x>=y, x<=y",
            "property": "산술연산자, 대입연산자, 증감연산자, 비교연산자, 논리연산자",
            "element": "연산된 결괏값은 true(참) 또는 false(거짓)로 논리형 데이터를 반환합니다."
        },{
            "type": "Javascript",
            "id": 9,
            "title": "논리연산자",
            "desc": "논리 연산자에는 ||(or), &&(and), !(not)이 있습니다.",
            "category": "x&&y, x||y, !x",
            "property": "산술연산자, 대입연산자, 증감연산자, 비교연산자, 논리연산자",
            "element": "논리 연산자는 피연산자가 논리형 데이터인 true 또는 false로 결괏값을 반환합니다."
        },{
            "type": "Javascript",
            "id": 10,
            "title": "if문",
            "desc": "if문은 조건식을 만족(true)할 경우에만 코드를 실행합니다.",
            "category": "if(조건식){ //실행코드}",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "0, null, ''(빈문자), undefined가 조건식에 입력되면 false를 반환합니다."
        },{
            "type": "Javascript",
            "id": 11,
            "title": "if~else문",
            "desc": "else문은 조건식을 만족할(true) 경우와 만족하지 않은(false)경우에 따라 실행되는 코드가 달라집니다.",
            "category": "if(조건식){ //true일 때 실행 코드}else{ //false일 떄 실행 코드}",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "다중의 if~else 문은 else if 절을 만들기 위해 중첩될 수 있습니다."
        },{
            "type": "Javascript",
            "id": 12,
            "title": "다중 if문",
            "desc": "다중 if문은 두 가지 이상의 조건식과 정해 놓은 조건을 만족하지 않았을 때 실행되는 코드로 이루어져 있습니다.",
            "category": "if(조건식1){ //true일 때 실행 코드}else if(조건식2){ //앞 조건이 거짓일 때 실행코드}else{ //앞의 모든 조건이 거짓일 때 실행코드}",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "조건을 계속 설정할 수 있으며, 마지막에는 조건식을 쓰지 않습니다."
        },{
            "type": "Javascript",
            "id": 13,
            "title": "중첩 if문",
            "desc": "중첩 if문은 if문 안에  if문이 오는 구조입니다.",
            "category": "if(조건식1){if(조건식2)}{ //실행문}}",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "if문이 들어갈 수 있는 갯수에 대해서는 제한이 없습니다."
        },{
            "type": "Javascript",
            "id": 14,
            "title": "swich문",
            "desc": "swich문은 해당 조건에 맞는 case를 구분해서 수행하는 제어문입니다.",
            "category": "let 변수=초기값; switch(조건을 체크할 변수){case 값1; //조건을 체크할 변수가 값1을 가지면 실행 break;}",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "switch문은 if문처럼 조건식이 <,<=,>,>=와 같은 이상,이하,초과,미만같은 부등식이 사용될 수 없습니다."
        },{
            "type": "Javascript",
            "id": 15,
            "title": "삼항 연산자",
            "desc": "조건부 연산자는 조건을 처리하는  if문의 다른 형태 제어문입니다.",
            "category": "(조건) ? (참일 때 실행코드) : (거짓일 때 실행코드);",
            "property": "if문, if~else문, 다중 if문, 중첩 if문, swich문, 삼항 연산자",
            "element": "삼항연산자는 if~else문으로 변환시킬 수 있습니다."
        },{
            "type": "Javascript",
            "id": 16,
            "title": "while문",
            "desc": "while문은 조건식을 만족할 때까지 코드를 여러 회 반복하여 실행할 수 있습니다.",
            "category": "var 변수=초깃값; while(조건식){실행문; 증감식;}",
            "property": "while문, do while문, for문, 중첩 for문, break문, continue문",
            "element": "증감식을 넣지 않으면 무한대로 진행됩니다."
        },{
            "type": "Javascript",
            "id": 17,
            "title": "do while문",
            "desc": "do while문은 반드시 한번은 코드를 실행하고 조건식을 검사합니다.",
            "category": "var 변수=초깃값; do{실행문; 증감식;} while(조건식);",
            "property": "while문, do while문, for문, 중첩 for문, break문, continue문",
            "element": "기존 while문과 순서의 차이를 가진다고 볼 수 있습니다."
        },{
            "type": "Javascript",
            "id": 18,
            "title": "for문",
            "desc": "for문은 조건식을 만족할 때까지 특정 코드를 반복해서 실행합니다.",
            "category": "for(초깃값; 조건식; 증감식){ //반복 코드}",
            "property": "while문, do while문, for문, 중첩 for문, break문, continue문",
            "element": "사용 방법은 while문과 같지만 while문보다 사용하기 편해 사용 빈도가 높은 편입니다."
        },{
            "type": "Javascript",
            "id": 19,
            "title": "중첩 for문",
            "desc": "for문 안에 for문을 사용한 것을 중첩 for문이라고 합니다.",
            "category": "for(초깃값; 조건식; 증감식;){for(초깃값; 조건식; 증감식;){ //반복 코드}}",
            "property": "while문, do while문, for문, 중첩 for문, break문, continue문",
            "element": "중첩의 횟수는 제한이 없습니다."
        },{
            "type": "Javascript",
            "id": 20,
            "title": "함수",
            "desc": "함수는 하나의 실행문을 저장하고 변수는 하나의 데이터를 저장하여 사용합니다.",
            "category": "-",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "반복되는 실행문을 나타낼 때 코드를 간결화 시키면서 편리하게 사용할 수 있다는 장점이 있습니다."
        },{
            "type": "Javascript",
            "id": 21,
            "title": "선언적 함수",
            "desc": "가장 기본적으로 사용하는 함수의 형태입니다. 기본적으로 함수는 함수 이름을 설정하고 함수 이름을 호출해야 실행이 됩니다.",
            "category": "function 함수이름(){ //실행 코드} 함수이름();",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "같은 함수가 있을 경우, 아래에 있을수록 우선 순위가 높습니다."
        },{
            "type": "Javascript",
            "id": 22,
            "title": "익명 함수",
            "desc": "익명 함수는 함수에 이름이 없기 때문에 변수에 넣어서 사용하는 함수입니다.",
            "category": "let 변수이름=function(){ //실행 코드} 변수이름();",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "변수에는 숫자, 문자도 들어갈 수 있지만 함수도 들어갈 수 있습니다."
        },{
            "type": "Javascript",
            "id": 23,
            "title": "매개변수가 있는 함수",
            "desc": "매개변수가 있는 함수 정의문은 함수를 호출할 때 전달하고자 하는 값을 입력하여 호출할 수 있습니다.",
            "category": "function 함수(매개변수1, 매개변수2...){ //실행 코드} 함수이름(매개변수1, 매개변수2....);",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "전달된 값은 매개변수가 받아 함수 정의문에서 사용할 수 있게 됩니다."
        },{
            "type": "Javascript",
            "id": 24,
            "title": "argument 함수",
            "desc": "함수 정의문에서 arguments을 사용하면 매개변수를 사용하는 것처럼 함수 호출문의 값을 받아올 수 있습니다.",
            "category": "function 함수명(){argument;} 함수명(데이터1, 데이터2....)",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "arguments는 함수안에서 사용할 수 있도록 그 이름이나 특성이 약속되어 있는 일종의 배열입니다."
        },{
            "type": "Javascript",
            "id": 25,
            "title": "리턴값이 있는 함수",
            "desc": "return문은 함수에서 결괏값을 반환할 때 사용합니다.",
            "category": "function 함수명(){ //실행코드 return 리턴값;} let 변수=함수명();",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "리턴값은 실행문을 강제로 종료하는 역할도 합니다."
        },{
            "type": "Javascript",
            "id": 26,
            "title": "재귀 함수",
            "desc": "함수 정의문 내에서 작성한 코드로 함수를 다시 호출하는 것을 재귀 함수라고 합니다. ",
            "category": "function 함수명(){ //실행코드 함수명();} 함수명();",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "재귀함수는 함수 정의문 내에 함수를 다시 호출하여 함수를 반복문처럼 사용할 때 사용합니다."
        },{
            "type": "Javascript",
            "id": 27,
            "title": "콜백 함수",
            "desc": "함수를 변수에 저장하고 변수를 함수의 인자로 사용하여 매개변수에 전달하는 함수입니다.",
            "category": "변수명=function(함수명1, 2, 3){var 변수명=함수명1+2 함수명3(result);}",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "non-block이며, 비동기 방식의 함수를 사용합니다."
        },{
            "type": "Javascript",
            "id": 28,
            "title": "내부 함수(스코프)",
            "desc": "스코프(scope)의 사전적 의미는 '범위'이며, 여기에서는 변수 또는 함수의 유효 범위를 가르킵니다.",
            "category": "-",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "전역 함수는 자바스크립트 어디에서든 사용할 수 있는 함수이고, 지역 함수는 함수 스코프에서만 사용할 수 있는 함수입니다."
        },{
            "type": "Javascript",
            "id": 29,
            "title": "객체 생성자 함수",
            "desc": "내장 객체를 생성할 때는 이미 자바스크립트 엔진에 내장되어 있는 객체 생성자 함수를 사용하여 객체를 생성합니다.",
            "category": "function 함수명(매개변수1, 매개변수2...){this.속성명=새값; this.함수명=function(){ //실행 코드}} let 참조 변수(인스턴스 네임)=new 함수명(); let 참조 변수={속성: 새 값, 함수명:function(){..}}",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "함수명은 소문자로 시작해도 무방하지만, 대문자로 시작하는 게 좋습니다."
        },{
            "type": "Javascript",
            "id": 30,
            "title": "프로토타입 함수",
            "desc": "프로토타입을 사용하여 등록한 함수는 원형(객체 생성자 함수)에서 생성된 객체를 공유할 수 있습니다.",
            "category": "function 함수명(매개변수1, 매개변수2, ..){this.속성명=새 값;} 함수명.prototype.함수명=function(){// 실행코드;}",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "여러개의 함수를 등록할 필요가 없어 간결하게 표현할 수 있습니다."
        },{
            "type": "Javascript",
            "id": 31,
            "title": "화살표 함수",
            "desc": "화살표 함수는 구문이 짧고 자신의 this, arguments, super 또는 new.target을 바인딩 하지 않습니다.",
            "category": "함수명=()=>{// 실행코드;}",
            "property": "재귀 함수, 콜백 함수, 내부 함수, 객체 생성자 함수, 프로토타입 함수, 화살표 함수...",
            "element": "화살표 함수는 항상 익명입니다. 이 함수 표현은 메소드 함수가 아닌 곳에 가장 적합합니다. 그래서 생성자로서 사용할 수 없습니다."
        },{
            "type": "javascript",
            "id": 32,
            "title": "addEventListener()",
            "desc": "addEventListener() 메서드는 지정한 이벤트가 대상에 전달될 때마다 호출할 함수를 설정합니다.",
            "category": "target.addEventListener(type, listener[, options]);",
            "property": "-",
            "element": "addEventListener()는 EventTarget의 주어진 이벤트 유형에, EventListener를 구현한 함수 또는 객체를 이벤트 처리기 목록에 추가해 작동합니다."
        },{
            "type": "javascript",
            "id": 33,
            "title": "class",
            "desc": "class는 객체를 생성하기 위한 템플릿입니다.",
            "category": "class 클래스명{constructor(매개변수1, 매개변수2){this.매개변수1=매개변수1; this.매개변수2=매개변수2;}}",
            "property": "class 선언, Hoistion, class 표현식",
            "element": "클래스는 데이터와 이를 조작하는 코드를 하나로 추상화합니다. "
        },{
            "type": "javascript",
            "id": 34,
            "title": "classList",
            "desc": "classList 사용은 공백으로 구분된 문자열을 통해 엘리먼트의 클래스 목록에 접근하는 방식을 대체하는 간편한 방법입니다.",
            "category": "Element.classList",
            "property": "add, remove, item, toggle, contains, replace",
            "element": "존재하지 않는 클래스를 제거하는 것은 에러를 발생시키지 않습니다."
        },{
            "type": "javascript",
            "id": 35,
            "title": "getElementById()",
            "desc": "주어진 문자열과 일치하는 id 속성을 가진 요소를 찾고, 이를 나타내는 Element 객체를 반환합니다. ",
            "category": "document.getElementById()",
            "property": "-",
            "element": "ID가 없는 요소에 접근하려면 Document.querySelector()를 사용하여 모든 선택자를 사용할 수 있습니다."
        },{
            "type": "javascript",
            "id": 36,
            "title": "innerText",
            "desc": "내부의 텍스트 값을 가져올 때 사용합니다.",
            "category": "Element.innerText",
            "property": "innerHTML",
            "element": "HTML구조까지 모두 가져오는 경우는 innerHTML을 사용해야 한다는 차이점이 있습니다."
        },{
            "type": "javascript",
            "id": 37,
            "title": "innerHTML",
            "desc": "내부의 텍스트 값을 가져올 때 사용합니다.",
            "category": "Element.innerHTML",
            "property": "innerText",
            "element": "HTML구조까지 모두 가져옵니다."
        },{
            "type": "javascript",
            "id": 38,
            "title": "join()",
            "desc": "join() 메서드는 배열의 모든 요소를 연결해 하나의 문자열로 만들거나 요소를 추가해줍니다.",
            "category": "Array.prototype.join()",
            "property": "-",
            "element": "요소가 undefined 또는 null이면 빈 문자열로 변환합니다."
        },{
            "type": "javascript",
            "id": 39,
            "title": "Math.random()",
            "desc": "Math.random() 함수는 0이상 1미만의 구간에서 근사적으로 균일한 부동소숫점 의사난수를 반환합니다.",
            "category": "Math.random()",
            "property": "-",
            "element": "-"
        },{
            "type": "javascript",
            "id": 40,
            "title": "Math.round()",
            "desc": "Math.round() 함수는 입력값을 반올림한 수와 가장 가까운 정수 값을 반환합니다.",
            "category": "Math.round()",
            "property": "-",
            "element": "-"
        },{
            "type": "javascript",
            "id": 41,
            "title": "nextElementSibling",
            "desc": "선택한 요소의 바로 다음 형제 요소를 가르킵니다.",
            "category": "Element.nextElementSibling",
            "property": "previousElementSibling",
            "element": "-"
        },{
            "type": "javascript",
            "id": 42,
            "title": "querySelector()",
            "desc": "제공한 선택자 또는 선택자 뭉치와 일치하는 문서 내 첫 번째 Element를 반환합니다.",
            "category": "Element.querySelector()",
            "property": "querySelectorAll()",
            "element": "일치하는 요소가 없으면 null을 반환합니다."
        },{
            "type": "javascript",
            "id": 43,
            "title": "requestAnimationFrame()",
            "desc": "브라우저에게 수행하기를 원하는 애니메이션을 알리고 다음 리페인트가 진행되기 전에 함수를 호출하게 합니다.",
            "category": "requestAnimationFrame()",
            "property": "-",
            "element": "콜백의 수는 보통 1초에 60회이며, 메모리를 덜 차지해서 과부하를 방지해줍니다."
        },{
            "type": "javascript",
            "id": 44,
            "title": "setAttribute()",
            "desc": "setAttribute()는 선택한 요소(element)의 속성(attribute) 값을 정합니다.",
            "category": "Element.setAttribute()",
            "property": "-",
            "element": "이미 속성값이 존재한다면 그 값을 지우고 새 값을 적용합니다."
        },{
            "type": "javascript",
            "id": 45,
            "title": "setTimeout()",
            "desc": "타이머가 만료된 뒤 함수나 지정된 코드를 실행하는 타이머를 설정합니다.",
            "category": "let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)",
            "property": "setInterval()",
            "element": "-"
        },{
            "type": "javascript",
            "id": 46,
            "title": "setInterval()",
            "desc": "일정 시간 간격을 두고 함수를 실행하는 방법입니다.",
            "category": "var intervalID = scope.setInterval(func, [delay, arg1, arg2, ...]);",
            "property": "setTimeout()",
            "element": "함수 호출을 중단하려면 clearInterval(timerId)을 사용하면 됩니다."
        },{
            "type": "javascript",
            "id": 47,
            "title": "split()",
            "desc": "split() 메서드는 String 객체를 지정한 구분자를 이용하여 여러 개의 문자열로 나눕니다.",
            "category": "Element.split()",
            "property": "-",
            "element": "-"
        },{
            "type": "javascript",
            "id": 48,
            "title": "screenX",
            "desc": "모니터 화면을 기준으로 X좌표를 제공합니다.",
            "category": "window.screenX",
            "property": "client, offset, page",
            "element": "브라우저 화면이 아니라 자신의 모니터 화면 전체를 기준으로 좌표를 측정한다는 점입니다."
        },{
            "type": "javascript",
            "id": 49,
            "title": "screenY",
            "desc": "모니터 화면을 기준으로 Y좌표를 제공합니다.",
            "category": "window.screenY",
            "property": "client, offset, page",
            "element": "브라우저 화면이 아니라 자신의 모니터 화면 전체를 기준으로 좌표를 측정한다는 점입니다."
        },{
            "type": "javascript",
            "id": 50,
            "title": "textContent",
            "desc": "자바스크립트 프로퍼티인 textContent는 텍스트를 추가할 수 있는 매우 간단한 프로퍼티입니다.",
            "category": "Element.textContent='내용'",
            "property": "innerText",
            "element": "innerText와 기능은 비슷하나, 더 먼저 만들어져 브라우저 호환성이 놉습니다."
        },{
            "type": "javascript",
            "id": 51,
            "title": "toString()",
            "desc": "toString() 메서드는 특정한 Number 객체를 나타내는 문자열을 반환합니다.",
            "category": "numObj.toString([radix])",
            "property": "-",
            "element": "radix는 수의 값을 나타내기 위해 사용되기 위한 기준을 정하는 2와 36사이의 정수(진수를 나타내는 기수의 값.)"
        }
      ]
    }
  }